<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.uzi.mapper.GoodsMapper" >
  <resultMap id="BaseResultMap" type="com.uzi.model.Goods" >
    <id column="goodsid" property="goodsid" jdbcType="INTEGER" />
    <result column="goodsname" property="goodsname" jdbcType="VARCHAR" />
    <result column="goodsimg" property="goodsimg" jdbcType="VARCHAR" />
    <result column="goodsprice" property="goodsprice" jdbcType="INTEGER" />
    <result column="goodsinfo" property="goodsinfo" jdbcType="VARCHAR" />
    <result column="goodsnum" property="goodsnum" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    goodsid, goodsname, goodsimg, goodsprice, goodsinfo, goodsnum
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.uzi.model.GoodsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from goods
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from goods
    where goodsid = #{goodsid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from goods
    where goodsid = #{goodsid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.uzi.model.GoodsExample" >
    delete from goods
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.uzi.model.Goods" >
    insert into goods (goodsid, goodsname, goodsimg, 
      goodsprice, goodsinfo, goodsnum
      )
    values (#{goodsid,jdbcType=INTEGER}, #{goodsname,jdbcType=VARCHAR}, #{goodsimg,jdbcType=VARCHAR}, 
      #{goodsprice,jdbcType=INTEGER}, #{goodsinfo,jdbcType=VARCHAR}, #{goodsnum,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.uzi.model.Goods" >
    insert into goods
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="goodsid != null" >
        goodsid,
      </if>
      <if test="goodsname != null" >
        goodsname,
      </if>
      <if test="goodsimg != null" >
        goodsimg,
      </if>
      <if test="goodsprice != null" >
        goodsprice,
      </if>
      <if test="goodsinfo != null" >
        goodsinfo,
      </if>
      <if test="goodsnum != null" >
        goodsnum,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="goodsid != null" >
        #{goodsid,jdbcType=INTEGER},
      </if>
      <if test="goodsname != null" >
        #{goodsname,jdbcType=VARCHAR},
      </if>
      <if test="goodsimg != null" >
        #{goodsimg,jdbcType=VARCHAR},
      </if>
      <if test="goodsprice != null" >
        #{goodsprice,jdbcType=INTEGER},
      </if>
      <if test="goodsinfo != null" >
        #{goodsinfo,jdbcType=VARCHAR},
      </if>
      <if test="goodsnum != null" >
        #{goodsnum,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.uzi.model.GoodsExample" resultType="java.lang.Integer" >
    select count(*) from goods
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update goods
    <set >
      <if test="record.goodsid != null" >
        goodsid = #{record.goodsid,jdbcType=INTEGER},
      </if>
      <if test="record.goodsname != null" >
        goodsname = #{record.goodsname,jdbcType=VARCHAR},
      </if>
      <if test="record.goodsimg != null" >
        goodsimg = #{record.goodsimg,jdbcType=VARCHAR},
      </if>
      <if test="record.goodsprice != null" >
        goodsprice = #{record.goodsprice,jdbcType=INTEGER},
      </if>
      <if test="record.goodsinfo != null" >
        goodsinfo = #{record.goodsinfo,jdbcType=VARCHAR},
      </if>
      <if test="record.goodsnum != null" >
        goodsnum = #{record.goodsnum,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update goods
    set goodsid = #{record.goodsid,jdbcType=INTEGER},
      goodsname = #{record.goodsname,jdbcType=VARCHAR},
      goodsimg = #{record.goodsimg,jdbcType=VARCHAR},
      goodsprice = #{record.goodsprice,jdbcType=INTEGER},
      goodsinfo = #{record.goodsinfo,jdbcType=VARCHAR},
      goodsnum = #{record.goodsnum,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.uzi.model.Goods" >
    update goods
    <set >
      <if test="goodsname != null" >
        goodsname = #{goodsname,jdbcType=VARCHAR},
      </if>
      <if test="goodsimg != null" >
        goodsimg = #{goodsimg,jdbcType=VARCHAR},
      </if>
      <if test="goodsprice != null" >
        goodsprice = #{goodsprice,jdbcType=INTEGER},
      </if>
      <if test="goodsinfo != null" >
        goodsinfo = #{goodsinfo,jdbcType=VARCHAR},
      </if>
      <if test="goodsnum != null" >
        goodsnum = #{goodsnum,jdbcType=INTEGER},
      </if>
    </set>
    where goodsid = #{goodsid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.uzi.model.Goods" >
    update goods
    set goodsname = #{goodsname,jdbcType=VARCHAR},
      goodsimg = #{goodsimg,jdbcType=VARCHAR},
      goodsprice = #{goodsprice,jdbcType=INTEGER},
      goodsinfo = #{goodsinfo,jdbcType=VARCHAR},
      goodsnum = #{goodsnum,jdbcType=INTEGER}
    where goodsid = #{goodsid,jdbcType=INTEGER}
  </update>
</mapper>